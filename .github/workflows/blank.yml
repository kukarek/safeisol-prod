name: Deploy Django to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build and restart Docker container on server
        uses: appleboy/ssh-action@v0.1.6
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_PORT: ${{ secrets.DB_PORT }}
          CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
          CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
          DEFAULT_FOR_EMAIL: ${{ secrets.DEFAULT_FOR_EMAIL }}
          SMTP: ${{ secrets.SMTP }}
          ADMIN_PASS: ${{ secrets.ADMIN_PASS }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /var/www/safeisol
            cd /var/www/safeisol
            
            cat > .env <<EOF
            DB_HOST=$DB_HOST
            DB_NAME=$DB_NAME
            DB_USER=$DB_USER
            DB_PASSWORD=$DB_PASSWORD
            DB_PORT=$DB_PORT
            CELERY_BROKER_URL=$CELERY_BROKER_URL
            CELERY_RESULT_BACKEND=$CELERY_RESULT_BACKEND
            ALLOWED_HOSTS=$ALLOWED_HOSTS
            SECRET_KEY=$SECRET_KEY
            EMAIL_HOST_USER=$EMAIL_HOST_USER
            EMAIL_HOST_PASSWORD=$EMAIL_HOST_PASSWORD
            DEFAULT_FROM_EMAIL=$DEFAULT_FROM_EMAIL
            DEFAULT_FOR_EMAIL=$DEFAULT_FOR_EMAIL
            SMTP=$SMTP
            ADMIN_PASS=$ADMIN_PASS
            EOF


            # Клонируем репозиторий или обновляем его
            if [ -d ".git" ]; then
              echo "Обновляю существующий репозиторий"
              git fetch origin
              git reset --hard origin/main
            else
              echo "Клонирую репозиторий"
              git clone https://github.com/kukarek/safeisol-prod.git .
            fi

            # Устанавливаем PostgreSQL, если он не установлен
            if ! command -v psql > /dev/null; then
              echo "PostgreSQL не найден, устанавливаю..."
              sudo apt-get update
              sudo apt-get install -y postgresql postgresql-contrib
              sudo systemctl enable postgresql
              sudo systemctl start postgresql
            else
              echo "PostgreSQL уже установлен"
            fi

            # Проверяем, создана ли база данных, если нет - создаем
            DB_EXISTS=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME'")
            echo "DB_EXISTS=$DB_EXISTS"
            if [ "$DB_EXISTS" = "1" ]; then
              echo "База данных $DB_NAME уже существует"
            else
              echo "Создаю базу данных $DB_NAME"
              sudo -u postgres psql -c "CREATE DATABASE \"$DB_NAME\";"
            fi

            # Обновляем образы и запускаем контейнеры Docker
            docker-compose build
            docker-compose up -d --force-recreate

            #Запускаем тесты
            docker-compose run --rm web python manage.py test

            # Ждем, пока контейнер web будет готов выполнять команды
            max_attempts=20
            attempt=0
            until docker-compose exec web python manage.py check > /dev/null 2>&1 || [ $attempt -eq $max_attempts ]; do
              echo "Waiting for web container to be ready... ($attempt/$max_attempts)"
              attempt=$((attempt + 1))
              sleep 3
            done

            if [ $attempt -eq $max_attempts ]; then
              echo "Web container failed to start in time."
              exit 1
            fi

            # Выполняем миграции и загрузку данных внутри контейнера
            docker-compose exec web python manage.py migrate --noinput
            docker-compose exec web python manage.py loaddata data.json

            docker-compose exec web python manage.py shell -c "
            from django.contrib.auth import get_user_model;
            User = get_user_model();
            username = 'admin';
            password = '${ADMIN_PASS}';
            if not User.objects.filter(username=username).exists():
                User.objects.create_superuser(username=username, email='admin@example.com', password=password);
                print('Superuser created');
            else:
                print('Superuser already exists');
            "
